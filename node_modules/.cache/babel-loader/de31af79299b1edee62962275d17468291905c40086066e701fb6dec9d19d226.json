{"ast":null,"code":"var _jsxFileName = \"/home/phthanh/smart-office/Smart-Office/src/contexts/MQTTContext.tsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useEffect, useState } from 'react';\nimport mqtt from 'mqtt';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst MQTTContext = /*#__PURE__*/createContext({\n  client: null,\n  isConnected: false,\n  publish: () => {},\n  deviceStates: {},\n  messageLog: []\n});\nexport const MQTTProvider = ({\n  children\n}) => {\n  _s();\n  const [client, setClient] = useState(null);\n  const [isConnected, setIsConnected] = useState(false);\n  const [deviceStates, setDeviceStates] = useState({});\n  const [messageLog, setMessageLog] = useState([]);\n  useEffect(() => {\n    // Local EMQX broker connection\n    const mqttClient = mqtt.connect('ws://localhost:8083/mqtt', {\n      username: 'smartoffice',\n      password: 'smartoffice123',\n      protocolVersion: 5\n    });\n    mqttClient.on('connect', () => {\n      console.log('Connected to MQTT broker');\n      setIsConnected(true);\n\n      // Subscribe to all office topics\n      mqttClient.subscribe('office/#', err => {\n        if (err) console.error('Subscription error:', err);\n      });\n    });\n    mqttClient.on('message', (topic, message) => {\n      const payload = message.toString();\n\n      // Always record raw message in the log (newest first)\n      setMessageLog(prev => {\n        const next = [{\n          topic,\n          payload,\n          receivedAt: new Date()\n        }, ...prev];\n        return next.slice(0, 200);\n      });\n\n      // Normalize a few common conventions so UI components can read a consistent key.\n      // Convention: office/{room}/{device}/{subtopic}\n      // If subtopic is 'set' or 'control' treat it as intent and mirror to '{base}/state'.\n      // If subtopic is 'state' or 'status' store as '{base}/state'. Otherwise keep raw topic (sensors etc.).\n      setDeviceStates(prev => {\n        const next = {\n          ...prev\n        };\n        try {\n          const parts = topic.split('/');\n          if (parts.length >= 4 && parts[0] === 'office') {\n            const base = parts.slice(0, 3).join('/'); // e.g. office/room1/light\n            const sub = parts.slice(3).join('/'); // remainder\n            if (sub === 'set' || sub === 'control') {\n              next[`${base}/state`] = {\n                state: payload,\n                lastUpdate: new Date()\n              };\n            } else if (sub === 'state' || sub === 'status') {\n              next[`${base}/state`] = {\n                state: payload,\n                lastUpdate: new Date()\n              };\n            } else {\n              // sensor or other topic under device: keep raw topic key\n              next[topic] = {\n                state: payload,\n                lastUpdate: new Date()\n              };\n            }\n          } else {\n            // Non-office topics: store raw\n            next[topic] = {\n              state: payload,\n              lastUpdate: new Date()\n            };\n          }\n        } catch (e) {\n          // Fallback: store raw\n          next[topic] = {\n            state: payload,\n            lastUpdate: new Date()\n          };\n        }\n        return next;\n      });\n    });\n    mqttClient.on('error', err => {\n      console.error('MQTT error:', err);\n      setIsConnected(false);\n    });\n    setClient(mqttClient);\n    return () => {\n      mqttClient.end();\n    };\n  }, []);\n  const publish = (topic, message) => {\n    if (client && isConnected) {\n      client.publish(topic, message);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(MQTTContext.Provider, {\n    value: {\n      client,\n      isConnected,\n      publish,\n      deviceStates,\n      messageLog\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 109,\n    columnNumber: 5\n  }, this);\n};\n_s(MQTTProvider, \"o6qOiT7eIayWDUSXMfRGHgKquLE=\");\n_c = MQTTProvider;\nexport const useMQTT = () => {\n  _s2();\n  return useContext(MQTTContext);\n};\n_s2(useMQTT, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\nvar _c;\n$RefreshReg$(_c, \"MQTTProvider\");","map":{"version":3,"names":["React","createContext","useContext","useEffect","useState","mqtt","jsxDEV","_jsxDEV","MQTTContext","client","isConnected","publish","deviceStates","messageLog","MQTTProvider","children","_s","setClient","setIsConnected","setDeviceStates","setMessageLog","mqttClient","connect","username","password","protocolVersion","on","console","log","subscribe","err","error","topic","message","payload","toString","prev","next","receivedAt","Date","slice","parts","split","length","base","join","sub","state","lastUpdate","e","end","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","useMQTT","_s2","$RefreshReg$"],"sources":["/home/phthanh/smart-office/Smart-Office/src/contexts/MQTTContext.tsx"],"sourcesContent":["import React, { createContext, useContext, useEffect, useState } from 'react';\nimport mqtt, { MqttClient } from 'mqtt';\n\ninterface MQTTContextType {\n  client: MqttClient | null;\n  isConnected: boolean;\n  publish: (topic: string, message: string) => void;\n  deviceStates: {\n    [key: string]: {\n      state: string;\n      lastUpdate: Date;\n    };\n  };\n  // Recent raw messages received (newest first)\n  messageLog: Array<{ topic: string; payload: string; receivedAt: Date }>;\n}\n\nconst MQTTContext = createContext<MQTTContextType>({\n  client: null,\n  isConnected: false,\n  publish: () => {},\n  deviceStates: {},\n  messageLog: [],\n});\n\nexport const MQTTProvider: React.FC<{ children: React.ReactNode }> = ({ children }) => {\n  const [client, setClient] = useState<MqttClient | null>(null);\n  const [isConnected, setIsConnected] = useState(false);\n  const [deviceStates, setDeviceStates] = useState<MQTTContextType['deviceStates']>({});\n  const [messageLog, setMessageLog] = useState<MQTTContextType['messageLog']>([]);\n\n  useEffect(() => {\n    // Local EMQX broker connection\n    const mqttClient = mqtt.connect('ws://localhost:8083/mqtt', {\n      username: 'smartoffice',\n      password: 'smartoffice123',\n      protocolVersion: 5,\n    });\n\n    mqttClient.on('connect', () => {\n      console.log('Connected to MQTT broker');\n      setIsConnected(true);\n      \n      // Subscribe to all office topics\n      mqttClient.subscribe('office/#', (err) => {\n        if (err) console.error('Subscription error:', err);\n      });\n    });\n\n    mqttClient.on('message', (topic, message) => {\n      const payload = message.toString();\n\n      // Always record raw message in the log (newest first)\n      setMessageLog(prev => {\n        const next = [{ topic, payload, receivedAt: new Date() }, ...prev];\n        return next.slice(0, 200);\n      });\n\n      // Normalize a few common conventions so UI components can read a consistent key.\n      // Convention: office/{room}/{device}/{subtopic}\n      // If subtopic is 'set' or 'control' treat it as intent and mirror to '{base}/state'.\n      // If subtopic is 'state' or 'status' store as '{base}/state'. Otherwise keep raw topic (sensors etc.).\n      setDeviceStates(prev => {\n        const next = { ...prev };\n        try {\n          const parts = topic.split('/');\n          if (parts.length >= 4 && parts[0] === 'office') {\n            const base = parts.slice(0, 3).join('/'); // e.g. office/room1/light\n            const sub = parts.slice(3).join('/'); // remainder\n            if (sub === 'set' || sub === 'control') {\n              next[`${base}/state`] = { state: payload, lastUpdate: new Date() };\n            } else if (sub === 'state' || sub === 'status') {\n              next[`${base}/state`] = { state: payload, lastUpdate: new Date() };\n            } else {\n              // sensor or other topic under device: keep raw topic key\n              next[topic] = { state: payload, lastUpdate: new Date() };\n            }\n          } else {\n            // Non-office topics: store raw\n            next[topic] = { state: payload, lastUpdate: new Date() };\n          }\n        } catch (e) {\n          // Fallback: store raw\n          next[topic] = { state: payload, lastUpdate: new Date() };\n        }\n        return next;\n      });\n    });\n\n    mqttClient.on('error', (err) => {\n      console.error('MQTT error:', err);\n      setIsConnected(false);\n    });\n\n    setClient(mqttClient);\n\n    return () => {\n      mqttClient.end();\n    };\n  }, []);\n\n  const publish = (topic: string, message: string) => {\n    if (client && isConnected) {\n      client.publish(topic, message);\n    }\n  };\n\n  return (\n    <MQTTContext.Provider value={{ client, isConnected, publish, deviceStates, messageLog }}>\n      {children}\n    </MQTTContext.Provider>\n  );\n};\n\nexport const useMQTT = () => useContext(MQTTContext);"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}